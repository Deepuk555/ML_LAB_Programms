import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import preprocessing

le=preprocessing.LabelEncoder()
data = pd.read_csv("id3-data.csv")

features=[feat for feat in data]
targetLabel=features[-1]
features.remove(features[-1])


diff_values = []
for f in features:
    for v in data[f]:
        if v not in diff_values:
            diff_values.append(v)

le.fit(diff_values)

dataArray=np.array(data.iloc[:,0:-1])

x = []
for d in dataArray:
    x.append(le.transform(d))
x = np.array(x)
target=data[targetLabel]
target=np.array(target)
y=[]
for t in target:
    if t == "yes":
        y.append(1)
    else:
        y.append(0)
y = np.array(y)

class multinomialNB:
    def __init__(self, alpha=1):
        self.alpha = alpha

    def fit(self, X_train, y_train):
        m, n = X_train.shape
        self._classes = np.unique(y_train)
        n_classes = len(self._classes)

        # init: Prior & Likelihood
        self._priors = np.zeros(n_classes)
        self._likelihoods = np.zeros((n_classes, n))

        # Get Prior and Likelihood
        for idx, c in enumerate(self._classes):
            X_train_c = X_train[c == y_train]
            self._priors[idx] = X_train_c.shape[0] / m
            self._likelihoods[idx, :] = ((X_train_c.sum(axis=0)) + self.alpha) / (
                np.sum(X_train_c.sum(axis=0) + self.alpha))

    def predict(self, X_test):
        return [self._predict(x_test) for x_test in X_test]

    def _predict(self, x_test):
        # Calculate posterior for each class
        posteriors = []
        for idx, c in enumerate(self._classes):
            prior_c = np.log(self._priors[idx])
            likelihoods_c = self.calc_likelihood(self._likelihoods[idx, :], x_test)
            posteriors_c = np.sum(likelihoods_c) + prior_c
            posteriors.append(posteriors_c)

        return self._classes[np.argmax(posteriors)]

    def calc_likelihood(self, cls_likeli, x_test):
        return np.log(cls_likeli) * x_test

    def score(self, X_test, y_test):
        y_pred = self.predict(X_test)
        return np.sum(y_pred == y_test) / len(y_test)


x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)
mNB = multinomialNB()
mNB.fit(x_train,y_train)
print(mNB.score(x_test,y_test))
